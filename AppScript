/**
 * @OnlyCurrentDoc
*/
 
/**
 * Change these to match the column names you are using for email 
 * recipient addresses and email sent column.
*/
const RECIPIENT_COL  = "Recipient";
const EMAIL_SENT_COL = "Email Sent";
 
/** 
 * Creates the menu item "Mail Merge" for user to run scripts on drop-down.
 */
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('Mail Merge')
      .addItem('Send Emails', 'sendEmails')
      .addToUi();
}
 
/**
 * Sends emails from sheet data.
 * @param {string} subjectLine (optional) for the email draft message
 * @param {Sheet} sheet to read data from
*/
function sendEmails(subjectLine, sheet=SpreadsheetApp.getActiveSheet()) {
  // option to skip browser prompt if you want to use this code in other projects
  if (!subjectLine){
    subjectLine = Browser.inputBox("Mail Merge", 
                                      "Type or copy/paste the subject line of the Gmail " +
                                      "draft message you would like to mail merge with:",
                                      Browser.Buttons.OK_CANCEL);
                                      
    if (subjectLine === "cancel" || subjectLine == ""){ 
    // If no subject line, finishes up
    return;
    }
  }
  
  // Gets the draft Gmail message to use as a template
  const emailTemplate = getGmailTemplateFromDrafts_(subjectLine);
  
  // Gets the data from the passed sheet
  const dataRange = sheet.getDataRange();

  
  const data = dataRange.getDisplayValues();

  // Assumes row 1 contains our column headings
  const heads = data.shift(); 
  
 
  const emailSentColIdx = heads.indexOf(EMAIL_SENT_COL);
  
  const obj = data.map(r => (heads.reduce((o, k, i) => (o[k] = r[i] || '', o), {})));

  // Creates an array to record sent emails
  const out = [];

  // Loops through all the rows of data
  obj.forEach(function(row, rowIdx){
    // Find the empty columns in the row
    const emptyColumns = [];
    for (let key in row) {
      if (row[key] === '' && key !== EMAIL_SENT_COL && key!= 'Nationality' && key!= 'Employee ID') {
        emptyColumns.push(key);
      }
    }
    // Condition to determine the replacement for [conditional]
    let complianceText = 'to ensure accurate processing of your payroll and for the purposes of statutory compliance'; // default text
    const excludedColumns = ['Aadhar', 'PAN', 'UAN', 'Bank Details'];
    const includesExcludedColumns = emptyColumns.some(column => excludedColumns.includes(column));

    if (emptyColumns.length <= 3 && !includesExcludedColumns) {
      complianceText = 'for effective communication and to ensure we can reach you in case of an emergency';
    }
    // Only sends emails if email_sent cell is blank and not hidden by a filter
    if (row[EMAIL_SENT_COL] == ''){
      try {
        const msgObj = fillInTemplateFromObject_(emailTemplate.message, row);

        // Append the empty column names as numbered bullet points before the signature
        if (emptyColumns.length > 0) {
          let numberedList = '';
          emptyColumns.forEach((column, index) => {
            numberedList += `\n${index + 1}. ${column}`;
          });
          
        //Replace the [numbered list] placeholder with the actual numbered list
        msgObj.text = msgObj.text.replace("[numbered list]", `<b>${numberedList}</b>`).replace("[conditional]", complianceText);
        // Convert plain text to HTML and update msgObj.html
        msgObj.html = convertPlainTextToHtml(msgObj.text);

        }
        //console.log('msgObj.text \n' + msgObj.text + '\n')
        //console.log('msgObj.html \n' + msgObj.html)

        // If you need to send emails with unicode/emoji characters change GmailApp for MailApp
        // Uncomment advanced parameters as needed (see docs for limitations)
        GmailApp.sendEmail(row[RECIPIENT_COL], msgObj.subject, msgObj.text, {
          htmlBody: msgObj.html,
          // bcc: 'a.bcc@email.com',
          cc: 'adarsha.mohitsahu@flipkart.com, staccika.susan@flipkart.com',
          from: 'people-operations-communication@flipkart.com',
          // name: 'name of the sender',
          // replyTo: 'a.reply@email.com',
          // noReply: true, // if the email should be sent from a generic no-reply email address (not available to gmail.com users)
          attachments: emailTemplate.attachments,
          inlineImages: emailTemplate.inlineImages
        });
        // Edits cell to record email sent date
        out.push([new Date()]);
      } catch(e) {
        // modify cell to record error
        out.push([e.message]);
      }
    } else {
      out.push([row[EMAIL_SENT_COL]]);
    }
  });
  
  // Updates the sheet with new data
  sheet.getRange(2, emailSentColIdx+1, out.length).setValues(out);

  // Convert plain text to HTML by wrapping in <pre> tags to maintain formatting
  function convertPlainTextToHtml(plainText) {
    // Replace newlines with <br> tags and trim any extra newlines
    const html = plainText.replace(/\n/g, "<br>");
    return html;
  }
  
  /**
   * Get a Gmail draft message by matching the subject line.
   * @param {string} subject_line to search for draft message
   * @return {object} containing the subject, plain and html message body and attachments
  */
  function getGmailTemplateFromDrafts_(subject_line){
    try {
      // get drafts
      const drafts = GmailApp.getDrafts();
      // filter the drafts that match subject line
      const draft = drafts.filter(subjectFilter_(subject_line))[0];
      // get the message object
      const msg = draft.getMessage();
      //console.log("msgbody: \n", msg.getBody())
      
    
      // Gets all attachments and inline image attachments
      const allInlineImages = draft.getMessage().getAttachments({includeInlineImages: true,includeAttachments:false});
      const attachments = draft.getMessage().getAttachments({includeInlineImages: false});
      const htmlBody = msg.getBody(); 
      // Creates an inline image object with the image name as key 
      // (can't rely on image index as array based on insert order)
      const img_obj = allInlineImages.reduce((obj, i) => (obj[i.getName()] = i, obj) ,{});

      //Regexp searches for all img string positions with cid
      const imgexp = RegExp('<img.*?src="cid:(.*?)".*?alt="(.*?)"[^\>]+>', 'g');
      const matches = [...htmlBody.matchAll(imgexp)];

      //Initiates the allInlineImages object
      const inlineImagesObj = {};
      // built an inlineImagesObj from inline image matches
      matches.forEach(match => inlineImagesObj[match[1]] = img_obj[match[2]]);

      return {message: {subject: subject_line, text: msg.getBody(), html:htmlBody}, 
              attachments: attachments, inlineImages: inlineImagesObj };
    } catch(e) {
      throw new Error("Oops - can't find Gmail draft");
    }

    /**
     * Filter draft objects with the matching subject linemessage by matching the subject line.
     * @param {string} subject_line to search for draft message
     * @return {object} GmailDraft object
    */
    function subjectFilter_(subject_line){
      return function(element) {
        if (element.getMessage().getSubject() === subject_line) {
          return element;
        }
      }
    }
  }
  
  /**
   * Fill template string with data object

  */
  function fillInTemplateFromObject_(template, data) {
    // Stringify the template object for global replace
    //console.log("Template before replacement: \n", template)
    let template_string = JSON.stringify(template);

    // Replace placeholders with actual data
    template_string = template_string.replace(/{{[^{}]+}}/g, key => {
      const placeholder = key.replace(/[{}]+/g, "");
      // Check if data for placeholder exists and is not just whitespace
      if (data[placeholder].trim().length > 0) {
        return escapeData_(data[placeholder].trim());
      } else {
        return "";
      }
    });
    //console.log("Template after replacement:", template_string);

    // Parse back to JSON and convert any escaped line breaks back to <br> tags for HTML version
    const result = JSON.parse(template_string);
    if (result.html) {
        result.html = result.html.replace(/\\n/g, "<br>");
    }
    return result;
  }



  function escapeData_(str) {
    return str
      .replace(/[\\]/g, '\\\\')
      .replace(/[\"]/g, '\\\"')
      .replace(/[\/]/g, '\\/')
      .replace(/[\b]/g, '\\b')
      .replace(/[\f]/g, '\\f')
      .replace(/[\n]/g, '\\n')
      .replace(/[\r]/g, '\\r')
      .replace(/[\t]/g, '\\t');
  };
}
